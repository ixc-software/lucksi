'''
Created on May 26, 2010

@author: root
'''

from PyQt4 import QtGui, QtCore
from CDUtilsPack.MetaUtils import Property
from QConfigMain.GuiFieldWidgetFactory import GuiFieldWidgetFactory
from GuiDeviceCommon import GuiDeviceCommon

# ---------------------------------------------------------------

class GuiDeviceWidget(QtGui.QFrame):
    """Wrapper for generated by pyuic device widget class. Base class for 
    GuiDevice and custom part of GuiDevice."""
    
    def __init__(self, parent : QtGui.QWidget, uiPyModule, 
                 className : str = 'Ui_Widget'):
        """
        'parent' - common widget for all device types,
        'uiPyModule' - generated from Widget.ui py-module.  
        """
        QtGui.QFrame.__init__(self)
        
        self.ui = uiPyModule.__dict__[className]()
        self.ui.setupUi(self)
        self.setParent(parent)
        
        if parent:
            parent.setMinimumHeight(parent.minimumHeight() + self.minimumHeight())
            parent.resize(parent.width(), parent.minimumHeight())
        
    Ui = Property('ui')
    
    @property
    def Parent(self) -> QtGui.QWidget:
        return self.parent()

# ---------------------------------------------------------------

class WidgetMaker:
    """Using to add new custom elements to custom widget or setup existed."""
    
    def __init__(self, deviceCommon : GuiDeviceCommon, 
                 widget : GuiDeviceWidget, meta : GuiFieldWidgetFactory,
                 adjustParentOnResize : bool):
        self.common = deviceCommon
        self.widget = widget
        self.meta = meta
        self.adjustParent = adjustParentOnResize
    
    
    @property
    def __UiDict(self) -> QtGui.QWidget:
        return self.widget.Ui.__dict__
    
    
    @property
    def __Parent(self) -> QtGui.QWidget:
        return self.widget.Parent
    
    
    def __SubWidget(self, name : str) -> QtGui.QWidget:
        if not name in self.__UiDict.keys():
            raise AssertionError("Unknown widget name: '{0}'".format(name))
        return self.__UiDict[name]
    
    
    def AddToolBar(self, name : str, height = 37, 
                   allowedArea = QtCore.Qt.TopToolBarArea):
        """
        Create tool bar with the name 'name' and add it to widget 
        dictionary.
        """
        toolBar = QtGui.QToolBar(self.widget)
        toolBar.setMinimumWidth(0) #self.widget.width())
        toolBar.setMinimumHeight(height)
        toolBar.setAllowedAreas(allowedArea)
        self.__UiDict[name] = toolBar
    
    
    def AddToolBarBtn(self, toolBarName : str, name : str, slot, withSep : bool, 
                      enableOnRun : bool, enableOnStop : bool,
                      iconFileName : str = None) -> QtGui.QAction:
        """Create tool bar button, add it to tool bar  'toolBar' and return."""
        toolBar = self.__UiDict[toolBarName]
        act = QtGui.QAction(toolBar)
        act.setText(act.tr(name))
        act.setObjectName(name)
        if iconFileName:
            act.setIcon(QtGui.QIcon(iconFileName))
            toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        act.setEnabled(enableOnStop)
        act.triggered.connect(slot)
        toolBar.addAction(act)
        if withSep: 
            toolBar.addSeparator()
        toolBar.adjustSize() 
        self.common.EnableWidget(act, enableOnRun, enableOnStop)      
        return act
    
    
    def SetupShowWidgetBtn(self, buttonName : str, showHideWidgetName : str,
                           toResizeWidgetsNames : [str], hideOnStartup : bool,
                           onShowBntText = '>>', onHideBtnText = '<<'):
        """Setup button 'buttonName' to show/hide widget 'showHideWidgetName'.
        Size of widgets specified in 'toResizeWidgetsNames' and parent widget 
        will be adjusted."""
        toResizeWidgets = [self.widget]
        if self.adjustParent: toResizeWidgets.append(self.__Parent)
        for name in toResizeWidgetsNames:
            toResizeWidgets.append(self.__SubWidget(name))
        
        btn = self.__SubWidget(buttonName)
        assert isinstance(btn, QtGui.QPushButton)
        toShow = self.__SubWidget(showHideWidgetName)
        
        def OnClicked():
            addHeight = toShow.height()
            if btn.text() == btn.tr(onShowBntText):
                toShow.setVisible(True)
                btn.setText(btn.tr(onHideBtnText))
            else:
                btn.setText(btn.tr(onShowBntText))
                toShow.setVisible(False)
                addHeight *= -1
            
            def Adjust(widget : QtGui.QWidget) -> int:
                h = widget.minimumHeight() + addHeight
                assert h > 0
                widget.setMinimumHeight(h)
                widget.setMaximumHeight(h)
                widget.resize(widget.width(), h)                            
            
            for w in toResizeWidgets:
                Adjust(w)
            
        btn.clicked.connect(OnClicked)
        if hideOnStartup: btn.clicked.emit(False) # hide widget
        
        
    def EnableWidget(self, widgetName : str, onRun : bool, onStop : bool):
        """
        Register widget 'widgtName' in list.
        onRun - enable(True) or disable(False) widget when device is running,
        inStop - enable(True) or disable(False) widget when device is stopped.
        """
        widget = self.__SubWidget(widgetName)
        self.common.EnableWidget(widget, onRun, onStop)
    
    
    def ChangeStatus(self, text : str):
        self.common.Status(text)

# ---------------------------------------------------------------
# Tests
# ---------------------------------------------------------------

from TestDecor import UtTest
from AllTest.TestRunner import GTestRunner
from PackUtils.CorePathes import TempFiles
from PackUtils.CoreTrace import CoreTrace
from AllTest.TestParams import TestParams


@UtTest
def WidgetMakerTest():
    
    def Impl(p : TestParams):
        parent = QtGui.QWidget()
        uiPyModule = TempFiles.UiPyModule('Test')
        w = GuiDeviceWidget(parent, uiPyModule, 'Ui_Widget')
        assert w.Ui
        assert w.Parent == parent
        
        stat = []
        
        Status = lambda name, text: stat.append(text)
        Trace = lambda obj, text, textID: None
        OnSave = lambda: None
        
        meta = GuiFieldWidgetFactory()
        m = WidgetMaker(GuiDeviceCommon('name', Status, CoreTrace(Trace, True)), 
                        w, meta, True)
        m.AddToolBar('toolBar', 25, QtCore.Qt.BottomToolBarArea)
        
        act = m.AddToolBarBtn('toolBar', 'Save', OnSave, withSep = False, 
                              enableOnRun = False, enableOnStop = True)
        assert act
        assert act.text() == 'Save'
        
        m.SetupShowWidgetBtn('btnShowInfo', 'showInfo', [], False, 'Show', 'Hide')
        
        m.EnableWidget('host', False, False)
        assert w.Ui.host.isEnabled()
        
        m.ChangeStatus('Idle')
        assert stat[0] == 'Idle'
        
        p.Output("WidgetMakerTest: OK")
        p.Complete()
    
    GTestRunner.RunApp(Impl, traceTest = False)

# ---------------------------------------------------------------
 
if __name__ == "__main__":
    
    import unittest
    unittest.main()
